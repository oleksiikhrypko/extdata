// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type OrderWorldLogoOps struct {
	Field     OrderWorldLogosFields `json:"field"`
	Direction Direction             `json:"direction"`
}

type PaginatedWorldLogos struct {
	Items []WorldLogo `json:"items"`
	Total uint64      `json:"total"`
}

type Pagination struct {
	Limit     uint64  `json:"limit"`
	Offset    *uint64 `json:"offset,omitempty"`
	OffsetKey *string `json:"offset_key,omitempty"`
}

type Query struct {
}

type SpaceFilterOptions struct {
	Ids []string `json:"ids,omitempty"`
}

type WorldLogo struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	LogoPath  string    `json:"logo_path"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Direction string

const (
	DirectionAsc  Direction = "ASC"
	DirectionDesc Direction = "DESC"
)

var AllDirection = []Direction{
	DirectionAsc,
	DirectionDesc,
}

func (e Direction) IsValid() bool {
	switch e {
	case DirectionAsc, DirectionDesc:
		return true
	}
	return false
}

func (e Direction) String() string {
	return string(e)
}

func (e *Direction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Direction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Direction", str)
	}
	return nil
}

func (e Direction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderWorldLogosFields string

const (
	OrderWorldLogosFieldsID   OrderWorldLogosFields = "id"
	OrderWorldLogosFieldsName OrderWorldLogosFields = "name"
)

var AllOrderWorldLogosFields = []OrderWorldLogosFields{
	OrderWorldLogosFieldsID,
	OrderWorldLogosFieldsName,
}

func (e OrderWorldLogosFields) IsValid() bool {
	switch e {
	case OrderWorldLogosFieldsID, OrderWorldLogosFieldsName:
		return true
	}
	return false
}

func (e OrderWorldLogosFields) String() string {
	return string(e)
}

func (e *OrderWorldLogosFields) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderWorldLogosFields(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderWorldLogosFields", str)
	}
	return nil
}

func (e OrderWorldLogosFields) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
