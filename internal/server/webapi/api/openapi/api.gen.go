// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for GetWorldLogosParamsSortBy.
const (
	Id   GetWorldLogosParamsSortBy = "id"
	Name GetWorldLogosParamsSortBy = "name"
)

// Defines values for GetWorldLogosParamsSortOrder.
const (
	ASC  GetWorldLogosParamsSortOrder = "ASC"
	DESC GetWorldLogosParamsSortOrder = "DESC"
)

// Error defines model for error.
type Error struct {
	Fields  map[string]interface{} `json:"fields"`
	Message string                 `json:"message"`
}

// WorldLogo defines model for worldLogo.
type WorldLogo struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	LogoPath  string    `json:"logo_path"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// WorldLogoInput defines model for worldLogoInput.
type WorldLogoInput struct {
	LogoBase64Str string `json:"logo_base64_str"`
	Name          string `json:"name"`
	SrcKey        string `json:"src_key"`
}

// ApiKey defines model for api-key.
type ApiKey = string

// IdParam defines model for idParam.
type IdParam = string

// Limit defines model for limit.
type Limit = uint64

// Offset defines model for offset.
type Offset = uint64

// OffsetKey defines model for offset-key.
type OffsetKey = string

// ErrorResponse defines model for errorResponse.
type ErrorResponse = Error

// NotFoundResponse defines model for notFoundResponse.
type NotFoundResponse = Error

// GetWorldLogosParams defines parameters for GetWorldLogos.
type GetWorldLogosParams struct {
	// Limit The number of items to return
	Limit Limit `form:"limit" json:"limit"`

	// Offset The number of items to skip before starting to collect the result set, has less priority than offset-key
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// OffsetKey The key to use for offsetting the result set, has more priority than offset
	OffsetKey *OffsetKey `form:"offset-key,omitempty" json:"offset-key,omitempty"`

	// Search The search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ids The ID's of the world logos
	Ids *[]string `form:"ids,omitempty" json:"ids,omitempty"`

	// SortBy The field to sort by
	SortBy *GetWorldLogosParamsSortBy `form:"sort-by,omitempty" json:"sort-by,omitempty"`

	// SortOrder The order to sort by
	SortOrder *GetWorldLogosParamsSortOrder `form:"sort-order,omitempty" json:"sort-order,omitempty"`
}

// GetWorldLogosParamsSortBy defines parameters for GetWorldLogos.
type GetWorldLogosParamsSortBy string

// GetWorldLogosParamsSortOrder defines parameters for GetWorldLogos.
type GetWorldLogosParamsSortOrder string

// CreateWorldLogoParams defines parameters for CreateWorldLogo.
type CreateWorldLogoParams struct {
	// XAPIKEY API key to access the API
	XAPIKEY ApiKey `json:"X-API-KEY"`
}

// DeleteWorldLogoByIdParams defines parameters for DeleteWorldLogoById.
type DeleteWorldLogoByIdParams struct {
	// XAPIKEY API key to access the API
	XAPIKEY ApiKey `json:"X-API-KEY"`
}

// CreateWorldLogoJSONRequestBody defines body for CreateWorldLogo for application/json ContentType.
type CreateWorldLogoJSONRequestBody = WorldLogoInput

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetWorldLogos request
	GetWorldLogos(ctx context.Context, params *GetWorldLogosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorldLogoWithBody request with any body
	CreateWorldLogoWithBody(ctx context.Context, params *CreateWorldLogoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorldLogo(ctx context.Context, params *CreateWorldLogoParams, body CreateWorldLogoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorldLogoById request
	DeleteWorldLogoById(ctx context.Context, id IdParam, params *DeleteWorldLogoByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorldLogoById request
	GetWorldLogoById(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetWorldLogos(ctx context.Context, params *GetWorldLogosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorldLogosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorldLogoWithBody(ctx context.Context, params *CreateWorldLogoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorldLogoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorldLogo(ctx context.Context, params *CreateWorldLogoParams, body CreateWorldLogoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorldLogoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorldLogoById(ctx context.Context, id IdParam, params *DeleteWorldLogoByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorldLogoByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorldLogoById(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorldLogoByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetWorldLogosRequest generates requests for GetWorldLogos
func NewGetWorldLogosRequest(server string, params *GetWorldLogosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/world-logo/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OffsetKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset-key", runtime.ParamLocationQuery, *params.OffsetKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort-by", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort-order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorldLogoRequest calls the generic CreateWorldLogo builder with application/json body
func NewCreateWorldLogoRequest(server string, params *CreateWorldLogoParams, body CreateWorldLogoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorldLogoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateWorldLogoRequestWithBody generates requests for CreateWorldLogo with any type of body
func NewCreateWorldLogoRequestWithBody(server string, params *CreateWorldLogoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/world-logo/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-API-KEY", runtime.ParamLocationHeader, params.XAPIKEY)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-API-KEY", headerParam0)

	}

	return req, nil
}

// NewDeleteWorldLogoByIdRequest generates requests for DeleteWorldLogoById
func NewDeleteWorldLogoByIdRequest(server string, id IdParam, params *DeleteWorldLogoByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/world-logo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-API-KEY", runtime.ParamLocationHeader, params.XAPIKEY)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-API-KEY", headerParam0)

	}

	return req, nil
}

// NewGetWorldLogoByIdRequest generates requests for GetWorldLogoById
func NewGetWorldLogoByIdRequest(server string, id IdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/world-logo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWorldLogosWithResponse request
	GetWorldLogosWithResponse(ctx context.Context, params *GetWorldLogosParams, reqEditors ...RequestEditorFn) (*GetWorldLogosResponse, error)

	// CreateWorldLogoWithBodyWithResponse request with any body
	CreateWorldLogoWithBodyWithResponse(ctx context.Context, params *CreateWorldLogoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorldLogoResponse, error)

	CreateWorldLogoWithResponse(ctx context.Context, params *CreateWorldLogoParams, body CreateWorldLogoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorldLogoResponse, error)

	// DeleteWorldLogoByIdWithResponse request
	DeleteWorldLogoByIdWithResponse(ctx context.Context, id IdParam, params *DeleteWorldLogoByIdParams, reqEditors ...RequestEditorFn) (*DeleteWorldLogoByIdResponse, error)

	// GetWorldLogoByIdWithResponse request
	GetWorldLogoByIdWithResponse(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*GetWorldLogoByIdResponse, error)
}

type GetWorldLogosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorldLogo
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorldLogosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorldLogosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorldLogoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorldLogo
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateWorldLogoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorldLogoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorldLogoByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteWorldLogoByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorldLogoByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorldLogoByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorldLogo
	JSON404      *NotFoundResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWorldLogoByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorldLogoByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWorldLogosWithResponse request returning *GetWorldLogosResponse
func (c *ClientWithResponses) GetWorldLogosWithResponse(ctx context.Context, params *GetWorldLogosParams, reqEditors ...RequestEditorFn) (*GetWorldLogosResponse, error) {
	rsp, err := c.GetWorldLogos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorldLogosResponse(rsp)
}

// CreateWorldLogoWithBodyWithResponse request with arbitrary body returning *CreateWorldLogoResponse
func (c *ClientWithResponses) CreateWorldLogoWithBodyWithResponse(ctx context.Context, params *CreateWorldLogoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorldLogoResponse, error) {
	rsp, err := c.CreateWorldLogoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorldLogoResponse(rsp)
}

func (c *ClientWithResponses) CreateWorldLogoWithResponse(ctx context.Context, params *CreateWorldLogoParams, body CreateWorldLogoJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorldLogoResponse, error) {
	rsp, err := c.CreateWorldLogo(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorldLogoResponse(rsp)
}

// DeleteWorldLogoByIdWithResponse request returning *DeleteWorldLogoByIdResponse
func (c *ClientWithResponses) DeleteWorldLogoByIdWithResponse(ctx context.Context, id IdParam, params *DeleteWorldLogoByIdParams, reqEditors ...RequestEditorFn) (*DeleteWorldLogoByIdResponse, error) {
	rsp, err := c.DeleteWorldLogoById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorldLogoByIdResponse(rsp)
}

// GetWorldLogoByIdWithResponse request returning *GetWorldLogoByIdResponse
func (c *ClientWithResponses) GetWorldLogoByIdWithResponse(ctx context.Context, id IdParam, reqEditors ...RequestEditorFn) (*GetWorldLogoByIdResponse, error) {
	rsp, err := c.GetWorldLogoById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorldLogoByIdResponse(rsp)
}

// ParseGetWorldLogosResponse parses an HTTP response from a GetWorldLogosWithResponse call
func ParseGetWorldLogosResponse(rsp *http.Response) (*GetWorldLogosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorldLogosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorldLogo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWorldLogoResponse parses an HTTP response from a CreateWorldLogoWithResponse call
func ParseCreateWorldLogoResponse(rsp *http.Response) (*CreateWorldLogoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorldLogoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorldLogo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorldLogoByIdResponse parses an HTTP response from a DeleteWorldLogoByIdWithResponse call
func ParseDeleteWorldLogoByIdResponse(rsp *http.Response) (*DeleteWorldLogoByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorldLogoByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorldLogoByIdResponse parses an HTTP response from a GetWorldLogoByIdWithResponse call
func ParseGetWorldLogoByIdResponse(rsp *http.Response) (*GetWorldLogoByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorldLogoByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorldLogo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get world logos
	// (GET /world-logo/)
	GetWorldLogos(ctx echo.Context, params GetWorldLogosParams) error
	// Create world logo
	// (POST /world-logo/)
	CreateWorldLogo(ctx echo.Context, params CreateWorldLogoParams) error
	// Delete world logo by id
	// (DELETE /world-logo/{id})
	DeleteWorldLogoById(ctx echo.Context, id IdParam, params DeleteWorldLogoByIdParams) error
	// Get world logo by id
	// (GET /world-logo/{id})
	GetWorldLogoById(ctx echo.Context, id IdParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetWorldLogos converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorldLogos(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorldLogosParams
	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "offset-key" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset-key", ctx.QueryParams(), &params.OffsetKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset-key: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids: %s", err))
	}

	// ------------- Optional query parameter "sort-by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort-by", ctx.QueryParams(), &params.SortBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort-by: %s", err))
	}

	// ------------- Optional query parameter "sort-order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort-order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort-order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorldLogos(ctx, params)
	return err
}

// CreateWorldLogo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorldLogo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateWorldLogoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-API-KEY" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-API-KEY")]; found {
		var XAPIKEY ApiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-API-KEY, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-API-KEY", valueList[0], &XAPIKEY, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-API-KEY: %s", err))
		}

		params.XAPIKEY = XAPIKEY
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-API-KEY is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateWorldLogo(ctx, params)
	return err
}

// DeleteWorldLogoById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorldLogoById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteWorldLogoByIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-API-KEY" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-API-KEY")]; found {
		var XAPIKEY ApiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-API-KEY, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-API-KEY", valueList[0], &XAPIKEY, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-API-KEY: %s", err))
		}

		params.XAPIKEY = XAPIKEY
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-API-KEY is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorldLogoById(ctx, id, params)
	return err
}

// GetWorldLogoById converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorldLogoById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorldLogoById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/world-logo/", wrapper.GetWorldLogos)
	router.POST(baseURL+"/world-logo/", wrapper.CreateWorldLogo)
	router.DELETE(baseURL+"/world-logo/:id", wrapper.DeleteWorldLogoById)
	router.GET(baseURL+"/world-logo/:id", wrapper.GetWorldLogoById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYYW/bOA/+K4LeF7gvSpxt3TD4W7duh9wGXLEN2B22oFMsOtFqSy5Ftw0K//eDJCdx",
	"aidtsEPvW2zL5EPyIR86dzyzZWUNGHI8veOVRFkCAYYrWenRJaz8TwUuQ12Rtoan/PR8yi5hxcgymWXg",
	"HKMlsNPzKRdc+wNLkAqQC25kCTzlf41Oz6ejD+/+5oIjXNUaQfGUsAbBXbaEUnontKr8YUeozYI3jeBa",
	"nXtEfQRflsC0Yhu847XnStJy61erIx0WutQ07M7U5RyQ2ZxpgtL54BGoRrN2fVUDrra+o6lD7hXksi6I",
	"p89fCp5bLCXxlNfa0KsTLngpb3VZlzx9NpkIXmrTXok1bm0IFoABuM1zB49H7i51xeaQWwTmSCJps/D3",
	"M1sUkFGoJ4KrC2IOSLCldKzwha5QW9S0YrSUhkWvgSTDSWhhdaPuB7o3nGH2+ZBa9tUOWG6xxRGDGEBe",
	"+jCHkB9E3Ya1ny6NL66rrHEQ+gUQLX5q7/gbmTUEhmIvVYXOpA8h+el8HHcdy/9HyHnK/5ds2zGJT10S",
	"rEZvu3mYGgI0smAO8BqQtQcFN5be29qop4PiS+IqyHSuQfn02xozYDfSMWOJ5R6NR2Yvu5h2bfz5IVS+",
	"9bXJZxhLaCtA0jHNuYZCuU5B7PwnZOTtl+CcXMBwb28b8dvmoFhbm4m+tRuLhfpoF7aPIUOQBOpC0g6l",
	"lSQYkS5hy+o1AD/MBnAJXtiFvQhja+hpZOTAg7pSRyK4l4IwG4P5LgbRDW3Hy8EMTU1VUz9Nwe5cOnh1",
	"cuEIj4vQYXbRDoDDkawP7obTcduH7s1DVvt58NkTLsJ9AxIBT+tYi3m4er/O7B9fv/D7vH/nWzCMHLKX",
	"YNiNpmW4/BFNMfaDVQi5vhUMxosx+976YHKeKXj2/MXJy+98vJ4yHmH0uq3ekqiKLadNHphImgr/ZKpA",
	"sjNbSm289oYxoDMf/zWgiwAn48l4EjqvAiMrzVP+ItwSQSlD1Emo4sgnLfHXiyEd+RSkzjHJCu3Ia0l4",
	"i/m3HA/2MYyUqeIp/x3o65oaLvja7hXfhmfM9kgSlbMRDx5sh/ijT4aJ7k8PTC+QmC3ZWgiGVCEeOagI",
	"g6anZ785nzDPi92kDXnRyu24CJI92B/tDYkoV/t8h+kWBN8isfne0CzSaL6rdmD8ttGdEzPxuIAtKt8V",
	"j3Iazg76Pf38lgt+9u7z2yHHs3va+3wyOUrmNmk9pHdbAeinu6eBhzukEfxlhDjkcBNKsrtDdOdU6Jzu",
	"hPo281lwdVlKXMWmu8cvkgvfcHzb4HzWCF5ZN9Dhb8PcZ5IZuOnYYQiZRSWYzsPWJQsEqVYMbrUjJ5gm",
	"dqOLgs2BtWLRmwbR8mYgHD0P1t8hsehXNTh6Y9XqX1tr7qlYs6svfmtvfpFtjyTZflK1otypy1MwqqVE",
	"x+keTjViR0XutGoiwQqggVXvLNz3reK0WRTQp1uPQ/GVDYferKbqF3nUL+fhPHZ21ydIfYy3m5j5ioVR",
	"vKepH1DtRye6K91tlv9b6h/A3gh+Mjl5uA69D6Inn8YPVe84Iq//FmlmEZL//Isv7qbwo802n4d+mcei",
	"XSjTJCn8s6V1lL6evJ743kgGVqMzuB5636VJArc0UpLkSIUVdKzgeuyKlVm4paWxtq3J2Sbm+7YDzZgv",
	"f/vXUbsXdFLTzJp/AgAA//+DyPgtoxIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
