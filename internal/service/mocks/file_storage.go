// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// FileStorage is an autogenerated mock type for the FileStorage type
type FileStorage struct {
	mock.Mock
}

// CopyFolder provides a mock function with given fields: ctx, sourceFolder, destinationFolder
func (_m *FileStorage) CopyFolder(ctx context.Context, sourceFolder string, destinationFolder string) error {
	ret := _m.Called(ctx, sourceFolder, destinationFolder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, sourceFolder, destinationFolder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFolder provides a mock function with given fields: ctx, filename
func (_m *FileStorage) DeleteFolder(ctx context.Context, filename string) error {
	ret := _m.Called(ctx, filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBaseUrl provides a mock function with given fields:
func (_m *FileStorage) GetBaseUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Upload provides a mock function with given fields: ctx, filename, body, contentType
func (_m *FileStorage) Upload(ctx context.Context, filename string, body io.Reader, contentType string) (string, error) {
	ret := _m.Called(ctx, filename, body, contentType)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, string) (string, error)); ok {
		return rf(ctx, filename, body, contentType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, string) string); ok {
		r0 = rf(ctx, filename, body, contentType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, string) error); ok {
		r1 = rf(ctx, filename, body, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileStorage creates a new instance of FileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileStorage(t mockConstructorTestingTNewFileStorage) *FileStorage {
	mock := &FileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
